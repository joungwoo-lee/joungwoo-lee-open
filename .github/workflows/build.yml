# .github/workflows/build.yml
# → Git LFS 대신 GitHub Releases(Assets)로 sandboxdocker.tar 업로드하도록 수정
name: Publish Docker image tar to GitHub Release

on:
  push:
    branches: [ main ]
    paths:
      - "sandboxdocker/**"
      - ".github/workflows/build.yml"
  workflow_dispatch:

permissions:
  contents: write   # Release 생성/업로드에 필요

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history not required now)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sanity check (required files exist)
        run: |
          set -euo pipefail
          test -d sandboxdocker || { echo "sandboxdocker/ 폴더가 없습니다."; exit 1; }
          test -f sandboxdocker/docker_requirements.txt || { echo "docker_requirements.txt 없음"; exit 1; }
          test -f sandboxdocker/docker_runs.txt || { echo "docker_runs.txt 없음"; exit 1; }
          ls -la sandboxdocker || true

      - name: Generate Dockerfile automatically from docker_requirements.txt
        working-directory: sandboxdocker
        shell: bash
        run: |
          set -euo pipefail

          REQ_FILE="docker_requirements.txt"
          GEN_DIR=".gen"
          mkdir -p "${GEN_DIR}"

          extract_section() {
            local section="$1"
            awk -v s="$section" '
              BEGIN{ins=0}
              /^\s*\[/{ins = ($0 ~ "\\[" s "\\]"); next}
              ins {
                if ($0 !~ /^\s*#/ && $0 !~ /^\s*$/) print
              }
            ' "${REQ_FILE}" | sed 's/\r$//'
          }

          # 1) 섹션 파싱
          extract_section "apt"  | sed 's/\r$//' > "${GEN_DIR}/apt.list" || true
          extract_section "pip"  | sed 's/\r$//' > "${GEN_DIR}/pip.requirements" || true
          extract_section "runs" | sed 's/\r$//' > "${GEN_DIR}/build.runs" || true

          # 2) 컨테이너 런타임용 run 스크립트
          RUN_STARTUP="${GEN_DIR}/run_startup.sh"
          {
            echo '#!/usr/bin/env bash'
            echo 'set -euo pipefail'
            sed 's/\r$//' docker_runs.txt
            echo ''
            echo 'if [[ $# -gt 0 ]]; then exec "$@"; else exec bash -l; fi'
          } > "${RUN_STARTUP}"
          chmod +x "${RUN_STARTUP}"

          # 3) [runs] 섹션 → 빌드 타임 스크립트
          {
            echo '#!/usr/bin/env bash'
            echo 'set -euo pipefail'
            cat "${GEN_DIR}/build.runs"
          } > "${GEN_DIR}/build.runs.sh"
          chmod +x "${GEN_DIR}/build.runs.sh"

          # 4) Dockerfile 자동 생성
          cat > Dockerfile <<'EOF'
          FROM python:3.11-slim

          ENV DEBIAN_FRONTEND=noninteractive \
              PIP_DISABLE_PIP_VERSION_CHECK=1 \
              PYTHONDONTWRITEBYTECODE=1 \
              PYTHONUNBUFFERED=1

          ARG DOCKER_HOME=/root
          ENV DOCKER_HOME=${DOCKER_HOME}
          ENV PROJECT_DIR=${DOCKER_HOME}/sandboxdocker
          ENV EXT_VOLUME_DIR=${DOCKER_HOME}/ext_volume

          WORKDIR /tmp/build

          COPY .gen/apt.list /tmp/apt.list
          COPY .gen/pip.requirements /tmp/pip.requirements
          COPY .gen/build.runs.sh /tmp/build.runs.sh
          COPY .gen/run_startup.sh /usr/local/bin/run_startup.sh

          RUN set -euo pipefail; \
              apt-get update; \
              if [ -s /tmp/apt.list ]; then \
                xargs -a /tmp/apt.list apt-get install -y --no-install-recommends; \
              fi; \
              rm -rf /var/lib/apt/lists/*

          RUN set -euo pipefail; \
              if [ -s /tmp/pip.requirements ]; then \
                pip3 install --no-cache-dir -r /tmp/pip.requirements; \
              fi

          RUN set -euo pipefail; \
              if [ -s /tmp/build.runs.sh ]; then \
                bash /tmp/build.runs.sh; \
              fi

          RUN mkdir -p "${PROJECT_DIR}" "${EXT_VOLUME_DIR}"
          COPY . "${PROJECT_DIR}"

          VOLUME ["${EXT_VOLUME_DIR}"]
          WORKDIR ${PROJECT_DIR}

          ENTRYPOINT ["/usr/local/bin/run_startup.sh"]
          CMD []
          EOF

      - name: Build Docker image
        run: |
          docker build -t sandboxdocker:latest sandboxdocker

      - name: Save image as tar
        run: |
          docker save sandboxdocker:latest -o sandboxdocker.tar
          ls -lh sandboxdocker.tar

      # ⬇️ Git LFS 관련 단계 전부 제거
      # ⬇️ 브랜치로 tar 푸시하지 않음

      - name: Upload tar to GitHub Release (tag=build-latest)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-latest
          name: build-latest
          body: "Auto-published from commit ${{ github.sha }}"
          make_latest: true
          prerelease: true
          files: |
            sandboxdocker.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}