name: Build Docker, publish tar & compose to build branch

on:
  push:
    branches: ["main"]

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      IMAGE_BASENAME: sandboxdocker

    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      # 1) Build Docker image from repo root Dockerfile
      - name: Build Docker image
        run: |
          IMAGE="${IMAGE_BASENAME}:${{ github.sha }}"
          docker build -t "$IMAGE" .

      # 2) Save image to tar and stage artifacts
      - name: Save image to tar (stage)
        run: |
          STAGE_DIR="${RUNNER_TEMP}/artifacts"
          mkdir -p "$STAGE_DIR"
          IMAGE="${IMAGE_BASENAME}:${{ github.sha }}"
          docker save "$IMAGE" -o "${STAGE_DIR}/sandboxdocker.tar"

          # If autorun.sh exists in repo root, stage it too
          if [ -f "autorun.sh" ]; then
            cp autorun.sh "${STAGE_DIR}/autorun.sh"
          fi

          # Generate docker-compose.yml with required runtime config
          cat > "${STAGE_DIR}/docker-compose.yml" <<'EOF'
          version: "3.8"
          services:
            sandboxdocker:
              image: sandboxdocker:${GITHUB_SHA}
              container_name: sandboxdocker
              restart: always
              tty: true
              working_dir: /root/ext_volume
              environment:
                INTERNAL_LLM_API_BASE: "http://host.docker.internal:11434/v1"
                INTERNAL_LLM_API_KEY: "dev-key"
              volumes:
                - ${HOME}:/root/ext_volume
                - ./:/ext_src:ro
              ports:
                - "37910:37910"
                - "37911:37911"
                - "37912:37912"
                - "37913:37913"
                - "37914:37914"
                - "37915:37915"
                - "38010:38010"
                - "38011:38011"
              entrypoint: >
                bash -lc "
                  if [ -f /ext_src/autorun.sh ]; then
                    cp /ext_src/autorun.sh /root/autorun.sh;
                  fi;
                  if [ -f /root/autorun.sh ]; then
                    chmod +x /root/autorun.sh || true;
                    /root/autorun.sh || true;
                  fi;
                  exec sleep infinity
                "
          EOF

      # 3) Force-publish artifacts to build branch (keep last version only)
      - name: Push artifacts to build branch
        run: |
          set -euo pipefail
          STAGE_DIR="${RUNNER_TEMP}/artifacts"

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git fetch origin
          git checkout -B build origin/build || git checkout -B build

          # Clean working tree (tracked + untracked, except .git)
          git rm -rf . >/dev/null 2>&1 || true
          find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} +

          # Copy staged artifacts
          cp -f "${STAGE_DIR}/sandboxdocker.tar" .
          cp -f "${STAGE_DIR}/docker-compose.yml" .
          if [ -f "${STAGE_DIR}/autorun.sh" ]; then
            cp -f "${STAGE_DIR}/autorun.sh" .
          fi

          git add -A
          git commit -m "Publish sandboxdocker.tar & compose for ${{ github.sha }}" || echo "No changes to commit"
          git push origin build --force
